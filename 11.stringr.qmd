---
title: "11. Working with Strings"
author: "Patrick Spauster"
format:
  html:
    code-copy: true
    toc-location: right
editor: visual
---

## Video Tutorial

```{=html}
<div style="max-width:608px"><div style="position:relative;padding-bottom:66.118421052632%"><iframe id="kaltura_player" src="https://cdnapisec.kaltura.com/p/1674401/sp/167440100/embedIframeJs/uiconf_id/23435151/partner_id/1674401?iframeembed=true&playerId=kaltura_player&entry_id=1_qh1tjhi3&flashvars[streamerType]=auto&amp;flashvars[localizationCode]=en&amp;flashvars[sideBarContainer.plugin]=true&amp;flashvars[sideBarContainer.position]=left&amp;flashvars[sideBarContainer.clickToClose]=true&amp;flashvars[chapters.plugin]=true&amp;flashvars[chapters.layout]=vertical&amp;flashvars[chapters.thumbnailRotator]=false&amp;flashvars[streamSelector.plugin]=true&amp;flashvars[EmbedPlayer.SpinnerTarget]=videoHolder&amp;flashvars[dualScreen.plugin]=true&amp;flashvars[LeadWithHLSOnFlash]=true&amp;flashvars[Kaltura.addCrossoriginToIframe]=true&amp;&wid=1_w97k0x0u" width="608" height="402" allowfullscreen webkitallowfullscreen mozAllowFullScreen allow="autoplay *; fullscreen *; encrypted-media *" sandbox="allow-downloads allow-forms allow-same-origin allow-scripts allow-top-navigation allow-pointer-lock allow-popups allow-modals allow-orientation-lock allow-popups-to-escape-sandbox allow-presentation allow-top-navigation-by-user-activation" frameborder="0" title="11. strings" style="position:absolute;top:0;left:0;width:100%;height:100%"></iframe></div></div>
```
## What is a string?

Strings are groups of characters. They can form words, sentences, addresses, categories, or represent other data. Working with strings is going to be essential to cleaning data. Often times we get string and character data that is manually inputted and messy. We can use string modifiers to clean it up. Think of address data for example. What if addresses are misspelled or inconsistent in how they refer to street names?

In this lesson we'll learn a number of useful functions for manipulating and rewriting strings, using some base R, tidyverse, and a package called stringr.

## Separate & Paste

Let's read in a clean dataframe for film permits from the [open data portal](https://data.cityofnewyork.us/City-Government/Film-Permits/tg4x-b46p).

```{r message = F, warning=F}
library(tidyverse)
library(janitor)

filmpermits <- read_csv("Film_Permits.csv", 
                        col_types = cols(EventID = col_character())) %>%
  clean_names()
```

We can use `separate()` to split up long string columns and `paste()` to concatenate strings into new columns

```{r warning=F}
street_closures <- filmpermits %>% 
  separate_rows(parking_held, sep = ",") %>% #this makes a new row for each street closure listed
  separate(parking_held, into = c("street", "cross_street1", "cross_street2"), sep = "between|and") %>% #this separates the string into three different columns
  mutate_at(.vars = c("street", "cross_street1", "cross_street2", "borough", "country"), .funs = ~tolower(.)) %>% # a .fns argument takes a function like tolower, which makes all the characters lowercase. start the function with ~ and subsitite . for the argument of the nested function
  mutate(intersection1_address = paste(street, "and", cross_street1, borough, country), #paste concatenates strings to create, in this case an address of an intersection
         intersection2_address = paste(street, "and", cross_street1, borough, country))
```

## StringR

StringR is a package with a number of handy functions. All of them take a string as the first argument, and return the result of your inquiry. There's tons of possibilities and uses, here's few examples.

![](images/stringr.png)

![](images/stringr2.png)

The spacing for the strings in the street columns is weird, I can use `str_trim` to get rid of white space

```{r message = F}
library(stringr)

street_closures %>% head() %>% .$street #here I am just printing the first 10 rows of the variable street

street_closures %>% 
  mutate(street = str_trim(street, side = "both")) %>% 
  head() %>% #here I am just printing the first 10 rows of the variable street that I overwrote
  .$street
```

Or perhaps I want to know the total closures on 14th street, but I don't care if it's West 14th street or East 14th street, or I'm worried that sometimes it's in the data as "street" and other times as "st" - making it hard to do an exact match. `str_detect` finds matches of certain patterns. We can pair it with conditional logic to create a variable that flags if the closure was on the street we care about.

```{r}
street_closures %>% 
  filter(borough == "manhattan") %>% 
  mutate(fourteenth_street = if_else(str_detect(street, "14 |14th"), T, F)) %>% #use these with conditional logic!
  count(fourteenth_street) #count how many times!


  
```

Or use stringr to change data entry inconsistencies!

```{r}
street_replace <- street_closures %>% 
  mutate(street = str_replace(street, "14 ", "14th")) 
```

Writing **regular expressions,** the complex notation you can use to return parts of strings is a great example of something you can use AI for!

![](images/regex_ai.JPG)

```{r}
# Define the regular expression pattern
pattern <- "^(.*?)(?=\\b(?:street|boulevard|avenue|st|blvd|ave|rd|road|circle|cr)\\b)"

# Use str_match to extract the matched part
str_extract(head(street_closures)$street, pattern)


```
