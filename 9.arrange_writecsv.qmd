---
title: "9. Arrange and Write Data"
author: "Patrick Spauster"
format:
  html:
    code-copy: true
    toc-location: right
editor: visual
---

## Video Tutorial

```{=html}
<div style="max-width:608px"><div style="position:relative;padding-bottom:66.118421052632%"><iframe id="kaltura_player" src="https://cdnapisec.kaltura.com/p/1674401/sp/167440100/embedIframeJs/uiconf_id/23435151/partner_id/1674401?iframeembed=true&playerId=kaltura_player&entry_id=1_0c9gmqct&flashvars[streamerType]=auto&amp;flashvars[localizationCode]=en&amp;flashvars[sideBarContainer.plugin]=true&amp;flashvars[sideBarContainer.position]=left&amp;flashvars[sideBarContainer.clickToClose]=true&amp;flashvars[chapters.plugin]=true&amp;flashvars[chapters.layout]=vertical&amp;flashvars[chapters.thumbnailRotator]=false&amp;flashvars[streamSelector.plugin]=true&amp;flashvars[EmbedPlayer.SpinnerTarget]=videoHolder&amp;flashvars[dualScreen.plugin]=true&amp;flashvars[LeadWithHLSOnFlash]=true&amp;flashvars[Kaltura.addCrossoriginToIframe]=true&amp;&wid=1_9o78atzo" width="608" height="402" allowfullscreen webkitallowfullscreen mozAllowFullScreen allow="autoplay *; fullscreen *; encrypted-media *" sandbox="allow-downloads allow-forms allow-same-origin allow-scripts allow-top-navigation allow-pointer-lock allow-popups allow-modals allow-orientation-lock allow-popups-to-escape-sandbox allow-presentation allow-top-navigation-by-user-activation" frameborder="0" title="8. group by summarize" style="position:absolute;top:0;left:0;width:100%;height:100%"></iframe></div></div>
```
## How do we get data out of R?

Often, we will want to take data that we clean, mutate, summarize, filter, or select with, and output it for use in another software. Think about how you might want to process a million-row data set to get some summary statistics, then create a nice table in excel. Or take some data that you need to make a chart or graphic, and export it so that you can read it into DataWrapper or some other visualization tool. Maybe you need to send your boss a list of items that are buried in a big R dataset.

Writing data will let you take data out of R and use it other places. But first we might want to use some other functions to get it looking nice and orderly.

## Arrange

`arrange()` takes data and sorts it based on certain criteria. Like many of our basic functions, it takes a list `...` of inputs to sort on. Let's take a look at an example of something we summarized.

```{r}
library(tidyverse)
library(janitor)

?arrange()
```

Let's grab our code to read in the clean dataframe again. This time I'm just going to use a big pipe to go right to the summary.

```{r}
library(tidyverse)
library(janitor)

fhv_summary <- read_csv(file = "For_Hire_Vehicles__FHV__-_Active.csv") %>% 
  clean_names() %>% 
  rename(hybrid = veh) %>% 
  mutate(
    ride_type = case_when(
      base_name == "UBER USA, LLC" & base_type == "BLACK-CAR" ~ "BLACK CAR RIDESHARE",
      base_name != "UBER USA, LLC" & base_type == "BLACK-CAR" ~ "BLACK CAR NON-RIDESHARE",
      TRUE ~ base_type #if it doesn't meet either condition, return the base_type
    )) %>% 
  group_by(ride_type) %>% #group by the variable we just created!
  summarize(no_cars = n(),
            average_year = mean(vehicle_year, na.rm = T))

fhv_summary
```

Now Let's say we wanted to sort this list by average oldest car to newest car.

```{r}
fhv_summary %>% 
  arrange(average_year)
```

That puts all the oldest car on top and the newest car on bottom

`desc` is a function that transforms a vector to descending order, and is helpful to use **nested** inside arrange.

```{r}
fhv_arranged <- fhv_summary %>% 
  arrange(desc(average_year))
```

Arrange also works with multiple variables - the variable listed second breaks ties - and within groups with group_by.

## Write out data

Now that we have a nice table arranged the way we want, we can output it for use in another software.

`write_csv()` is a twin function to `read_csv()`. It takes the name of an object and then a filepath to write to.

```{r}
fhv_arranged %>% 
  write_csv(file = "ride_type_by_average_year.csv")
```

Since we used the **local path** this shows up right in our project directory. We will be writing out to `.csv`s mostly, but there are companion functions to write out other types of data, like excel spreadsheets.
