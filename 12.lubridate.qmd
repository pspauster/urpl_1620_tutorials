---
title: "12. Working with Dates"
author: "Patrick Spauster"
format:
  html:
    code-copy: true
    toc-location: right
editor: visual
---

## Video Tutorial

```{=html}
<div style="max-width:608px"><div style="position:relative;padding-bottom:66.118421052632%"><iframe id="kaltura_player" src="https://cdnapisec.kaltura.com/p/1674401/sp/167440100/embedIframeJs/uiconf_id/23435151/partner_id/1674401?iframeembed=true&playerId=kaltura_player&entry_id=1_qodj8v9m&flashvars[streamerType]=auto&amp;flashvars[localizationCode]=en&amp;flashvars[sideBarContainer.plugin]=true&amp;flashvars[sideBarContainer.position]=left&amp;flashvars[sideBarContainer.clickToClose]=true&amp;flashvars[chapters.plugin]=true&amp;flashvars[chapters.layout]=vertical&amp;flashvars[chapters.thumbnailRotator]=false&amp;flashvars[streamSelector.plugin]=true&amp;flashvars[EmbedPlayer.SpinnerTarget]=videoHolder&amp;flashvars[dualScreen.plugin]=true&amp;flashvars[LeadWithHLSOnFlash]=true&amp;flashvars[Kaltura.addCrossoriginToIframe]=true&amp;&wid=1_n383ocqv" width="608" height="402" allowfullscreen webkitallowfullscreen mozAllowFullScreen allow="autoplay *; fullscreen *; encrypted-media *" sandbox="allow-downloads allow-forms allow-same-origin allow-scripts allow-top-navigation allow-pointer-lock allow-popups allow-modals allow-orientation-lock allow-popups-to-escape-sandbox allow-presentation allow-top-navigation-by-user-activation" frameborder="0" title="12. lubridate" style="position:absolute;top:0;left:0;width:100%;height:100%"></iframe></div></div>
```
## Dates are tricky

Dates can be annoying to work with because they come in many formats...

-   08/31/2023

-   08-31-2023

-   08/31/23 01:30:36

-   08-31-2023 12:36 PM

But R has some helpful tools that standardize dates and allow us to use them in calculations

To begin, we're going to grab a new dataset from the NYC Open Data Portal, download it as a .csv, and save it to our project.

```{r warning=F, message=F}
library(tidyverse)
library(janitor)
filmpermits <- read_csv("Film_Permits.csv", 
                        col_types = cols(EventID = col_character())) %>%
  clean_names()
```

Let's clean it and do some summarizing

```{r}
filmpermits_clean <- filmpermits %>% 
  select(event_type, borough, category, sub_category_name, start_date_time, end_date_time) %>%
  filter(category != "WEB") %>%
  mutate(type = 
           case_when(category == 'Documentary' ~ 'Film',
                     category == 'Film' ~ 'Film', 
                     category == 'Television' ~ 'Television',
                     category == 'Commerical' ~ 'Commercial',
                     TRUE ~ 'Other')) 

```

## Working with dates

We're going to install the lubridate package and load it. Some core R packages have helpful cheatsheets like this one. With our core knowledge of how functions work we should be able to apply these to our work!.

We can use lubridate to work with dates that come in various formats. With the film permits dataset we can run the below to make R recognize these fields as dates. Here's a lubridate cheat sheet: https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_lubridate.pdf

![](images/R_lubridate/R_lubridate-1.jpg)

![](images/R_lubridate/R_lubridate-2.jpg)

```{r warning=F, message=F}
library(lubridate)

filmpermits_clean_dates <- filmpermits_clean %>% 
  mutate(start_date_time = mdy_hms(start_date_time),
         end_date_time = mdy_hms(end_date_time))

# Let's see what the earliest start date in the dataset is. This will run in the console. 
filmpermits_clean_dates %>% arrange(start_date_time)

# Let's see what the latest start date in the dataset is. 
filmpermits_clean_dates %>% arrange(desc(start_date_time))
```

Let's use lubridate to make a list of all the film permits active just this summer. When sending R a date in a logical condition, wrap it in `as.Date()` so R knows its a date not a string. R & Lubridate defaults to the `'YYYY-MM-DD'` format.

```{r}

filmpermits_summer23 <- filmpermits_clean_dates %>%
  filter(end_date_time >= as.Date('2023-06-01') & start_date_time <= as.Date('2023-08-31'))

# Now I can run the same analysis as above and see if the % breakdowns are any different. 

filmpermits_summer23_grouped <- filmpermits_summer23 %>% 
  group_by(type) %>%
  summarize(num_permits = n()) %>%
  mutate(share = num_permits / sum(num_permits)) %>%
  arrange(desc(share))

filmpermits_summer23_grouped
```
