[
  {
    "objectID": "1.installing_r.html",
    "href": "1.installing_r.html",
    "title": "1. Installing R",
    "section": "",
    "text": "To get started with this tutorial visit the RStudio download page"
  },
  {
    "objectID": "1.installing_r.html#installing-r-and-rstudio",
    "href": "1.installing_r.html#installing-r-and-rstudio",
    "title": "1. Installing R",
    "section": "Installing R and RStudio",
    "text": "Installing R and RStudio\nTo use R, we need R, the underlying language that runs our code, as well as R studio, an integrated development environment (IDE) that allows us to save files and edit and run code.\nTo get started, we’ll visit RStudio’s homepage to install R.\nFirst, Install R for your operating system from CRAN.\nThen download the latest version of RStudio and open it."
  },
  {
    "objectID": "10.stringr.html#what-is-a-string",
    "href": "10.stringr.html#what-is-a-string",
    "title": "10. Working with Strings",
    "section": "What is a string?",
    "text": "What is a string?\nOften, we will want to take data that we clean, mutate, summarize, filter, or select with, and output it for use in another software. Think about how you might want to process a million-row data set to get some summary statistics, then create a nice table in excel. Or take some data that you need to make a chart or graphic, and export it so that you can read it into DataWrapper or some other visualization tool. Maybe you need to send your boss a list of items that are buried in a big R dataset.\nIn this lesson we’ll learn a number of useful functions for manipulating and rewriting strings, using some base R, tidyverse, and a package called stringr."
  },
  {
    "objectID": "10.stringr.html#separate-paste",
    "href": "10.stringr.html#separate-paste",
    "title": "10. Working with Strings",
    "section": "Separate & Paste",
    "text": "Separate & Paste\narrange() takes data and sorts it based on certain criteria. Like many of our basic functions, it takes a list ... of inputs to sort on. Let’s take a look at an example of something we summarized.\n\n\n\nLet’s grab our code to read in the clean dataframe again. This time I’m just going to use a big pipe to go right to the summary.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.1.3\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nfhv_summary <- read_csv(file = \"For_Hire_Vehicles__FHV__-_Active.csv\") %>% \n  clean_names() %>% \n  rename(hybrid = veh) %>% \n  mutate(\n    ride_type = case_when(\n      base_name == \"UBER USA, LLC\" & base_type == \"BLACK-CAR\" ~ \"BLACK CAR RIDESHARE\",\n      base_name != \"UBER USA, LLC\" & base_type == \"BLACK-CAR\" ~ \"BLACK CAR NON-RIDESHARE\",\n      TRUE ~ base_type #if it doesn't meet either condition, return the base_type\n    )) %>% \n  group_by(ride_type) %>% #group by the variable we just created!\n  summarize(no_cars = n(),\n            average_year = mean(vehicle_year, na.rm = T))\n\nRows: 98318 Columns: 23\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (20): Active, Vehicle License Number, Name, License Type, Expiration Da...\ndbl   (1): Vehicle Year\nlgl   (1): Order Date\ntime  (1): Last Time Updated\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfhv_summary\n\n# A tibble: 4 x 3\n  ride_type               no_cars average_year\n  <chr>                     <int>        <dbl>\n1 BLACK CAR NON-RIDESHARE   16225        2018.\n2 BLACK CAR RIDESHARE       76710        2018.\n3 LIVERY                     3652        2015.\n4 LUXURY                     1731        2020.\n\n\nNow Let’s say we wanted to sort this list by average oldest car to newest car.\n\nfhv_summary %>% \n  arrange(average_year)\n\n# A tibble: 4 x 3\n  ride_type               no_cars average_year\n  <chr>                     <int>        <dbl>\n1 LIVERY                     3652        2015.\n2 BLACK CAR NON-RIDESHARE   16225        2018.\n3 BLACK CAR RIDESHARE       76710        2018.\n4 LUXURY                     1731        2020.\n\n\nThat puts all the oldest car on top and the newest car on bottom\ndesc is a function that transforms a vector to descending order, and is helpful to use nested inside arrange.\n\nfhv_arranged <- fhv_summary %>% \n  arrange(desc(average_year))\n\nArrange also works with multiple variables - the variable listed second breaks ties - and within groups with group_by."
  },
  {
    "objectID": "10.stringr.html#write-out-data",
    "href": "10.stringr.html#write-out-data",
    "title": "10. Working with Strings",
    "section": "Write out data",
    "text": "Write out data\nNow that we have a nice table arranged the way we want, we can output it for use in another software.\nwrite_csv() is a twin function to read_csv(). It takes the name of an object and then a filepath to write to.\n\nfhv_arranged %>% \n  write_csv(file = \"ride_type_by_average_year.csv\")\n\nSince we used the local path this shows up right in our project directory. We will be writing out to .csvs mostly, but there are companion functions to write out other types of data, like excel spreadsheets."
  },
  {
    "objectID": "11.lubridate.html#dates-are-tricky",
    "href": "11.lubridate.html#dates-are-tricky",
    "title": "11. Working with Dates",
    "section": "Dates are tricky",
    "text": "Dates are tricky\nDates can be annoying to work with because they come in many formats…\n\n08/31/2023\n08-31-2023\n08/31/23 01:30:36\n08-31-2023 12:36 PM\n\nBut R has some helpful tools that standardize dates and allow us to use them in calculations\nTo begin, we’re going to grab a new dataset from the NYC Open Data Portal, download it as a .csv, and save it to our project.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.1.3\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nfilmpermits <- read_csv(\"Film_Permits.csv\", \n                        col_types = cols(EventID = col_character())) %>%\n  clean_names()\n\nLet’s clean it and do some summarizing\n\nfilmpermits_clean <- filmpermits %>% \n  select(event_type, borough, category, sub_category_name, start_date_time, end_date_time) %>%\n  filter(category != \"WEB\") %>%\n  mutate(type = \n           case_when(category == 'Documentary' ~ 'Film',\n                     category == 'Film' ~ 'Film', \n                     category == 'Television' ~ 'Television',\n                     category == 'Commerical' ~ 'Commercial',\n                     TRUE ~ 'Other')) \n\nfilmpermits_grouped <- filmpermits_clean %>%\n  group_by(type) %>% \n  summarize(num_permits = n()) %>% # n() is a count of the records\n  arrange(desc(num_permits)) %>%\n  mutate(share = num_permits / sum(num_permits))"
  },
  {
    "objectID": "11.lubridate.html#working-with-dates",
    "href": "11.lubridate.html#working-with-dates",
    "title": "11. Working with Dates",
    "section": "Working with dates",
    "text": "Working with dates\nWe’re going to install the lubridate package and load it. Some core R packages have helpful cheatsheets like this one. With our core knowledge of how functions work we should be able to apply these to our work!.\nWe can use lubridate to work with dates that come in various formats. With the film permits dataset we can run the below to make R recognize these fields as dates. Here’s a lubridate cheat sheet: https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_lubridate.pdf\n\n\n\nlibrary(lubridate)\n\nfilmpermits_clean_dates <- filmpermits_clean %>% \n  mutate(start_date_time = mdy_hms(start_date_time),\n         end_date_time = mdy_hms(end_date_time))\n\n# Let's see what the earliest start date in the dataset is. This will run in the console. \nfilmpermits_clean_dates %>% arrange(start_date_time)\n\n# A tibble: 2,597 x 7\n   event_type             borough category sub_category_name start_date_time    \n   <chr>                  <chr>   <chr>    <chr>             <dttm>             \n 1 Theater Load in and L~ Manhat~ Theater  Theater           2023-01-01 00:01:00\n 2 Theater Load in and L~ Manhat~ Theater  Theater           2023-01-01 00:01:00\n 3 Shooting Permit        Manhat~ Televis~ News              2023-01-01 04:00:00\n 4 Shooting Permit        Manhat~ Televis~ News              2023-01-02 04:00:00\n 5 Theater Load in and L~ Brookl~ Theater  Theater           2023-01-03 07:00:00\n 6 Shooting Permit        Queens  Televis~ Episodic series   2023-01-03 07:00:00\n 7 Shooting Permit        Brookl~ Televis~ Episodic series   2023-01-03 10:00:00\n 8 Rigging Permit         Manhat~ Documen~ Not Applicable    2023-01-03 17:00:00\n 9 Shooting Permit        Manhat~ Televis~ Morning Show      2023-01-04 05:00:00\n10 Shooting Permit        Manhat~ Documen~ Not Applicable    2023-01-04 06:00:00\n# i 2,587 more rows\n# i 2 more variables: end_date_time <dttm>, type <chr>\n\n# Let's see what the latest start date in the dataset is. \nfilmpermits_clean_dates %>% arrange(desc(start_date_time))\n\n# A tibble: 2,597 x 7\n   event_type             borough category sub_category_name start_date_time    \n   <chr>                  <chr>   <chr>    <chr>             <dttm>             \n 1 Shooting Permit        Manhat~ Film     Feature           2023-06-01 09:00:00\n 2 Shooting Permit        Manhat~ Televis~ News              2023-06-01 09:00:00\n 3 Shooting Permit        Queens  Film     Feature           2023-06-01 08:00:00\n 4 Shooting Permit        Bronx   Televis~ Episodic series   2023-06-01 07:00:00\n 5 Shooting Permit        Manhat~ Televis~ Episodic series   2023-06-01 07:00:00\n 6 Shooting Permit        Queens  Televis~ Episodic series   2023-06-01 07:00:00\n 7 Shooting Permit        Manhat~ Commerc~ Commercial        2023-06-01 06:00:00\n 8 Shooting Permit        Manhat~ Still P~ Not Applicable    2023-06-01 06:00:00\n 9 Shooting Permit        Brookl~ Televis~ Episodic series   2023-06-01 05:00:00\n10 Theater Load in and L~ Manhat~ Theater  Theater           2023-06-01 01:00:00\n# i 2,587 more rows\n# i 2 more variables: end_date_time <dttm>, type <chr>\n\n\nLet’s use lubridate to make a list of all the film permits active just this summer. When sending R a date in a logical condition, wrap it in as.Date() so R knows its a date not a string. R & Lubridate defaults to the 'YYYY-MM-DD' format.\n\nfilmpermits_summer23 <- filmpermits_clean_dates %>%\n  filter(end_date_time >= as.Date('2023-06-01') & start_date_time <= as.Date('2023-08-31'))\n\n# Now I can run the same analysis as above and see if the % breakdowns are any different. \n\nfilmpermits_summer23_grouped <- filmpermits_summer23 %>% \n  group_by(type) %>%\n  summarize(num_permits = n()) %>%\n  mutate(share = num_permits / sum(num_permits)) %>%\n  arrange(desc(share))\n\nfilmpermits_summer23_grouped\n\n# A tibble: 3 x 3\n  type       num_permits  share\n  <chr>            <int>  <dbl>\n1 Other               16 0.667 \n2 Television           6 0.25  \n3 Film                 2 0.0833"
  },
  {
    "objectID": "12.joins.html#joining-two-tables-together",
    "href": "12.joins.html#joining-two-tables-together",
    "title": "12. Joins",
    "section": "Joining two Tables together",
    "text": "Joining two Tables together\nJoins are powerful functions that allow you to connect two datasets together through matching values. They can be useful with spatial and non-spatial data alike.\nJoins rely on “keys” that match records across different datasets. This can be something like a name\nAs a recap of how joins work, we’re going to show a simple example of two different kinds of joins: ‘left’ joins and ‘inner’ joins. For this example, we will be using the band_members and band_instruments dataframes, which are simple, 3-row datasets that comes included in the dplyr package.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nband_members\n\n# A tibble: 3 x 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\nband_instruments\n\n# A tibble: 3 x 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\nAs you would expect, the first two arguments in a join function are the two tables you are trying to connect together. The third argument is the “join field”, which is the matching column in both datasets we will use to pair up rows."
  },
  {
    "objectID": "12.joins.html#left-joins",
    "href": "12.joins.html#left-joins",
    "title": "12. Joins",
    "section": "Left Joins",
    "text": "Left Joins\n\nA left_join keeps all of the rows in the first table you specify, appending data from the second table through matching values in the specified “join field”. Let’s see how this kind of join looks with our example data:\n\nband_members_and_instruments <- \n  left_join(band_members, band_instruments, by = \"name\")\n\n# When the \"join field\" column names don't match, you can use:\n# by = c(\"column1\" = \"column2\")\n\nband_members_and_instruments\n\n# A tibble: 3 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass"
  },
  {
    "objectID": "12.joins.html#inner-joins",
    "href": "12.joins.html#inner-joins",
    "title": "12. Joins",
    "section": "Inner Joins",
    "text": "Inner Joins\n\nAn `inner_join` keeps only the rows that have matching values between both tables in the specified “join field.” Any other rows are discarded. Let’s see how this kind of join looks with our example data:\n\nband_members_with_instruments_only <- \n  inner_join(band_members, band_instruments, by = \"name\")\n\nband_members_with_instruments_only\n\n# A tibble: 2 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass"
  },
  {
    "objectID": "12.joins.html#full-joins",
    "href": "12.joins.html#full-joins",
    "title": "12. Joins",
    "section": "Full Joins",
    "text": "Full Joins\n\nA full_join keeps all rows from both tables, even if a row from the join field isn’t present in one of them. It shows any missing values as NA.\n\nband_members_with_or_without_instruments <- \n  full_join(band_members, band_instruments, by = \"name\")\n\nband_members_with_or_without_instruments\n\n# A tibble: 4 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar"
  },
  {
    "objectID": "12.joins.html#troubleshooting-joins",
    "href": "12.joins.html#troubleshooting-joins",
    "title": "12. Joins",
    "section": "Troubleshooting Joins",
    "text": "Troubleshooting Joins\n\nJoining when matching columns have different names\nOften times, the “join field” in your first table has a different name than that of your second table. For example, you may be trying to join two tables on a common zip code, but the first table calls the column ‘Zip’ and the second table calls it ‘Postal Code’. There’s a special syntax here to make it work:\n\n# Let's change the \"name\" column to be called \"MusicalArtist\"\n\nband_instruments_renamed <- band_instruments %>% rename(MusicalArtist = name)\n\n# In our join function, we need to specify that the \"name\" column in the first table matches up with the \"MusicalArtist\" column in the second table. We do that by setting our \"by\" parameter differently:\n\nband_members_and_instruments_2 <- \n  inner_join(band_members, band_instruments_renamed, \n             by = c(\"name\" = \"MusicalArtist\"))\n\nband_members_and_instruments_2\n\n# A tibble: 2 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n\n\nYou can also join across multiple keys (variables), by giving by a list. It will return only rows that match both variables.\n\n\nDetecting duplicate values\nDuplicate values in your data can cause problems with joins. For example, what if our `band_instruments` dataset listed “John” twice:\n\n# Let's add a new row to band_instruments… say \"John\" also plays \"flute\"\n\nband_instruments_with_dup <- band_instruments %>% add_row(name = \"John\", plays = \"flute\")\n\nband_instruments_with_dup\n\n# A tibble: 4 x 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n4 John  flute \n\n\nWhen we try and join our `band_members` table with this new table, we now get 4 rows in the resulting table, even though our first table only had 3 rows… how can that be?\n\nband_members_and_instruments_dup <- \n\n  left_join(band_members, band_instruments_with_dup, by = \"name\")\n\nband_members_and_instruments_dup\n\n# A tibble: 4 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 John  Beatles flute \n4 Paul  Beatles bass  \n\n\nIn R, if there are multiple matches between the two tables, all combinations of the matches are returned. This GIF illustrates visually how this works:\n\nTo avoid confusing and unexpected results like this, it’s important to always check for duplicate values in your data, _especially_ in columns that you intend to use as a join field.\nLuckily, the `janitor` package has a function for that called `get_dupes`.\n\nlibrary(janitor)# Remember to run `install.packages('janitor')` in your console if you've\n\nband_instruments_with_dup %>% get_dupes(name)\n\n# A tibble: 2 x 3\n  name  dupe_count plays \n  <chr>      <int> <chr> \n1 John           2 guitar\n2 John           2 flute \n\n\nSometimes you may expect duplicate values in a column, and sometimes they may come as a surprise. General Rule: always know what each row represents in your data and what should be unique values."
  },
  {
    "objectID": "13.pivoting.html#wide-and-long-data",
    "href": "13.pivoting.html#wide-and-long-data",
    "title": "13. Pivoting",
    "section": "“Wide” and “Long” Data",
    "text": "“Wide” and “Long” Data"
  },
  {
    "objectID": "13.pivoting.html#pivoting-longer",
    "href": "13.pivoting.html#pivoting-longer",
    "title": "13. Pivoting",
    "section": "Pivoting Longer",
    "text": "Pivoting Longer\nFor this demo, we want to make a timeline of rent stabilized units in NYC.\nSo, let’s start by loading in some data from https://github.com/talos/nyc-stabilization-unit-counts.\nThe dataset we want is here.\nYou can save this file in your project folder and read it in how we’re used to. Or we can read it directly into our environment, a cool feature of read_csv() that lets you pull directly from a weblink.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nrent_stab_raw <- read_csv(\"https://taxbillsnyc.s3.amazonaws.com/joined.csv\")\n\nRows: 46461 Columns: 61\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (27): borough, 2007est, 2008est, 2009est, 2009dhcr, 2009abat, 2010est, 2...\ndbl (25): ucbbl, 2007uc, 2008uc, 2009uc, 2010uc, 2011uc, 2012uc, 2013uc, 201...\nlgl  (9): 2007dhcr, 2007abat, 2008dhcr, 2008abat, 2010dhcr, 2014dhcr, 2015dh...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThis project scraped data from PDFs of property tax documents to get estimates for rent stabilized units counts in buildings across NYC. You can read up on the various field names at the Github project page:\nhttps://github.com/talos/nyc-stabilization-unit-counts#user-content-data-usage.\nFor this demo, we only want to look at rent stabilized unit counts, which according to the Github doccumentation corresponds to column names that end in “uc”. Let’s also grab BBL (which is a unique identifier for NYC buildings) and Borough while we’re at it:\n\nrent_stab <- rent_stab_raw %>% select(borough, ucbbl, ends_with(\"uc\"))\n\n# starts_with(…) and ends_with(…) are neat selector functions to help you \n# grab names that fit a certain pattern \n\nAnnoyingly, the data separates unit counts for different years into different columns… to make a timeline, we need all of the yearly data to be stored in one column.\nWe can use the pivot_longer function included in tidyverse to transform our data accordingly. To get a conceptual picture of what we’re about to do, see this gif:\n\nHere is how we apply the `pivot_longer` function to our data:\n\nrs_long <- rent_stab %>% \n  pivot_longer(\n    ends_with(\"uc\"),  # The multiple column names we want to mush into one column\n    names_to = \"year\", # The title for the new column of names we're generating\n    values_to = \"units\" # The title for the new column of values we're generating\n  )\n\nNow we have data that is “tidy” there is one row for each year for each building. So each observation is a bbl-year pair.\n### 4. Pivoting data into “wide” format\nAdditionally, you may have data that is in this “long” format and wish to transform it into the “wide” format we are used to. Luckily, there is an analogous function called `pivot_wider` that does just that:\n```{r}\nrs_wide <- rs_long %>%\npivot_wider(\nnames_from = year, # The current column containing our future column names\nvalues_from = units # The current column containing the values for our future columns\n)\n```"
  },
  {
    "objectID": "14.ggplot.html#preparing-data-for-ggplot",
    "href": "14.ggplot.html#preparing-data-for-ggplot",
    "title": "14. ggplot",
    "section": "Preparing Data for ggplot",
    "text": "Preparing Data for ggplot\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nrent_stab_long <- read_csv(\"https://taxbillsnyc.s3.amazonaws.com/joined.csv\") %>% \n  select(borough, ucbbl, ends_with(\"uc\")) %>% \n  pivot_longer(\n    ends_with(\"uc\"),  # The multiple column names we want to mush into one column\n    names_to = \"year\", # The title for the new column of names we're generating\n    values_to = \"units\" # The title for the new column of values we're generating\n  )\n\nRows: 46461 Columns: 61\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (27): borough, 2007est, 2008est, 2009est, 2009dhcr, 2009abat, 2010est, 2...\ndbl (25): ucbbl, 2007uc, 2008uc, 2009uc, 2010uc, 2011uc, 2012uc, 2013uc, 201...\nlgl  (9): 2007dhcr, 2007abat, 2008dhcr, 2008abat, 2010dhcr, 2014dhcr, 2015dh...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "14.ggplot.html#ggplot-syntax",
    "href": "14.ggplot.html#ggplot-syntax",
    "title": "14. ggplot",
    "section": "ggplot syntax",
    "text": "ggplot syntax"
  },
  {
    "objectID": "2.r_projects.html#opening-r-studio",
    "href": "2.r_projects.html#opening-r-studio",
    "title": "2. Creating R Projects",
    "section": "Opening R Studio",
    "text": "Opening R Studio\nWhen you load RStudio, the screen will be split in three. This is some important vocabulary to direct yourself around RStudio and get help when you need it.\n\nThe CONSOLE is where all your code is run. Here you will see the output from the code you run. The COMMAND LINE is where you can type in code and execute it to the console. Code you run in the console is not saved. Try typing 1+1 into the console, and you’ll see that R spits back 2.\nThe ENVIRONMENT is where all your data will be stored. R is an object oriented programming language. Think of it like having a bunch of spreadsheets open at once. The environment shows you all the data you have loaded, and what each dataset, list, or other object is called.\nThe DIRECTORY is in the bottom right. This links to all the files in your current folder, called your working directory. If you are ever in the wrong working directory, you can set it by running the setwd() function or going to “Session” -\\> “Set Working Directory.” We will keep files organized by using an R Project."
  },
  {
    "objectID": "2.r_projects.html#creating-a-project",
    "href": "2.r_projects.html#creating-a-project",
    "title": "2. Creating R Projects",
    "section": "Creating a Project",
    "text": "Creating a Project\nAn R Project is basically a folder that will hold all your files together in one place - including your code, raw data, and any output you may produce.\nCreate your first R Project by clicking on the projects icon in the top right. You can create a project from a new or existing directory.\nWhen you return to RStudio to work on a saved project, open the project again by using the Project menu in RStudio, or double clicking the .Rproj file in the project directory."
  },
  {
    "objectID": "2.r_projects.html#creating-your-first-script",
    "href": "2.r_projects.html#creating-your-first-script",
    "title": "2. Creating R Projects",
    "section": "Creating Your First Script",
    "text": "Creating Your First Script\nGo to File -> New Script and save it to your project folder\nUse the assignment operator <- to save values, dataframes, and other objects to the environment for future use.\nUse command+enter (Mac) or ctrl + enter (Windows) to run your code. Or select all and then run the shortcut to run the whole script at once."
  },
  {
    "objectID": "3.packages_functions.html#packages",
    "href": "3.packages_functions.html#packages",
    "title": "3. Packages and Functions",
    "section": "Packages",
    "text": "Packages\nR is a base programming language. We access R through a library of different packages. Packages are downloadable content that we use in R to modify data. Packages are made up of functions, which we use to modify and analyze data.\nBase R has a number of functions, packages, and data already installed, which we can preview by putting code in our console.\nTake the iris dataset for example, which we can access by simply typing iris\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica\n\n\nTo get started with R, we need to install packages beyond the preinstalled.\nWe install packages with a console command, using a function called install.packages(). We can get our first, and most crucial package, the tidyverse, using this function. Copy this into your console. Make sure to put the package name in quotes.\n\nWe can install multiple packages at once by putting them into a list (also called a vector), like so. More on lists later.\n\nFinally we need to load packages at the beginning of our .R script in order to use them. The library() function loads functions that we have installed. Note that we only need to install packages once, so we use the command line. But we need to load packages with library each time we use them, so we put that in our .R script.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "3.packages_functions.html#functions",
    "href": "3.packages_functions.html#functions",
    "title": "3. Packages and Functions",
    "section": "Functions",
    "text": "Functions\nSo how do these functions we’ve been using work?\nEach function has a name and arguments. The name of a function tells R the operation we want to do. The arguments are the inputs for the function, or what we want to transform, separated by commas.\nYou can look up any R function by typing the function name into the console, preceded by a ?.\n\n?install.packages()\n\nstarting httpd help server ... done\n\n\nWhen we look at the first function we used, install.packages() the help menu pops up in the bottom right, describing the function, the arguments, and giving us examples. The first argument is called pkgs and it’s defined as “character vector of the names of the packages whose current versions should be downloaded from the repositories.” That first argument is required. Without it install.packages() won’t know which package to install.\nNote that the argument here, the name of the package, is in quotes. In programming, quotes define character objects. In this case the function requires a character input, so we use quotes. More on this later when we talk about data types.\nArguments in R can be named or ordered. Naming an argument means adding the name of the argument, followed by = and then the value of the argument. Unnamed arguments rely on the programmer to put each argument in the proper order, separated by commas. In this case, pkgs is the first argument. So install.packages(pkgs = \"tidyverse\") and install.packages(\"tidyverse\") do the same thing. When you are getting started programming, it’s good practice to name your arguments."
  },
  {
    "objectID": "3.packages_functions.html#tidy-data",
    "href": "3.packages_functions.html#tidy-data",
    "title": "3. Packages and Functions",
    "section": "Tidy Data",
    "text": "Tidy Data\nOur first package, the tidyverse features a number of functions that help keep our data organized in a way that a computer can read, understand, and transform it. The tidyverse uses a principle of tidy data, a standard way of mapping the meaning of a dataset to its structure. In tidy data…\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\nNext time we’ll learn how to read in data, keep it tidy, and get our observations in the right data types.\nTake a second look at iris to see an example of a tidy dataset. There’s one row (observation) for each flower in the sample, a column for each variable (measurements and species) and one value in each cell, the value of that variable for that observation."
  },
  {
    "objectID": "4.readingdata_datatypes.html#reading-data",
    "href": "4.readingdata_datatypes.html#reading-data",
    "title": "4. Reading Data and Data Types",
    "section": "Reading Data",
    "text": "Reading Data\nWe can use R to read in a number of different types of data, manipulate it, and output it in different ways.\nThe core type of data we will be using in this class is the .csv or a comma separated values file. A .csv is a text file where each observation is in its own row and each variable or value is, you guessed it, separated by a comma. R can read these types of files in super easily. Let’s download our first comma separated file from the NYC Open Data Portal.\n\nLet’s download the data on for hire vehicles in NYC and read it into R.\n\nIf we open a csv in a text editor it looks like this, but R will read it into something called a dataframe which is the tidy format for tabular data (data that has rows and columns).\nTo read data into R, we are going to need the function read_csv() and need to learn about file paths.\nIn order for R to read in the file, we need to tell R where the file is. We can do that with an absolute or a local path. An absolute path is the exact location of the file on your computer. For me, when I downloaded this file it went to my downloads folder - a path that looks something like this: /Users/patrickspauster/Downloads/For_Hire_Vehicles__FHV__-_Active.csv. You can look up the path to a file by navigating to the file in finder or windows explorer and right clicking to “Get Info”. I could read it in by using read_csv(\"/Users/patrickspauster/Downloads/For_Hire_Vehicles__FHV__-_Active.csv\").\nBut, not everyone who views my work or wants to run my code will have the same file structure on their computer. If i sent this code to someone and they tried to run it, they would get an error. That’s where the R project and a local path comes in handy.\nNow, save a copy of For_Hire_Vehicles__FHV__-_Active.csv to your project folder. When you do, you should see it appear in the file explorer in the bottom right of your R Studio window. Now we can access the .csv using a local path. Because we have the R project open, R will start looking in the project folder. Now we can run read_csv on our file without having to look up the path.\n(remember to load the tidyverse first! If you get an error like “the function function_name can’t be found”, you probably forgot to load the proper package with library()!)\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nread_csv(\"For_Hire_Vehicles__FHV__-_Active.csv\")\n\nRows: 98318 Columns: 23\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (20): Active, Vehicle License Number, Name, License Type, Expiration Da...\ndbl   (1): Vehicle Year\nlgl   (1): Order Date\ntime  (1): Last Time Updated\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 98,318 x 23\n   Active `Vehicle License Number` Name         `License Type` `Expiration Date`\n   <chr>  <chr>                    <chr>        <chr>          <chr>            \n 1 YES    5608977                  AMERICAN,UN~ FOR HIRE VEHI~ 04/30/2025       \n 2 YES    5645622                  RAMA,ILIR    FOR HIRE VEHI~ 09/11/2023       \n 3 YES    5192507                  ORDONEZ,ELI~ FOR HIRE VEHI~ 03/08/2025       \n 4 YES    5378856                  RIVERA,ENMA  FOR HIRE VEHI~ 11/12/2024       \n 5 YES    5852121                  A/VA,SERVIC~ FOR HIRE VEHI~ 04/11/2024       \n 6 YES    5415237                  REYES,JUAN,E FOR HIRE VEHI~ 10/31/2023       \n 7 YES    5643301                  BEGUM,TAZMI~ FOR HIRE VEHI~ 09/30/2025       \n 8 YES    5701439                  GONZALEZALV~ FOR HIRE VEHI~ 06/13/2024       \n 9 YES    5790931                  GOMEZ,JOSE,A FOR HIRE VEHI~ 05/23/2025       \n10 YES    5743759                  HOSSAIN,SM,~ FOR HIRE VEHI~ 12/08/2024       \n# i 98,308 more rows\n# i 18 more variables: `Permit License Number` <chr>,\n#   `DMV License Plate Number` <chr>, `Vehicle VIN Number` <chr>,\n#   `Wheelchair Accessible` <chr>, `Certification Date` <chr>,\n#   `Hack Up Date` <chr>, `Vehicle Year` <dbl>, `Base Number` <chr>,\n#   `Base Name` <chr>, `Base Type` <chr>, VEH <chr>,\n#   `Base Telephone Number` <chr>, Website <chr>, `Base Address` <chr>, ...\n\n\nLet’s take a closer look at what read_csv() is doing.\n\n?read_csv()\n\nstarting httpd help server ... done\n\n\nThe function has one required argument, “file” and several optional arguments that we can change. The “file” argument asks for a path to a file as a “string” - remember if you see the words “character” or “string” think quotes. So let’s feed read_csv() the name of the file we want to read in in quotes, and assign it to something using our assignment operator <- so we can further modify it.\n\nfhv <- read_csv(file = \"For_Hire_Vehicles__FHV__-_Active.csv\")\n\nRows: 98318 Columns: 23\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (20): Active, Vehicle License Number, Name, License Type, Expiration Da...\ndbl   (1): Vehicle Year\nlgl   (1): Order Date\ntime  (1): Last Time Updated\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n(Aside - naming things is hard, and you will have to name a lot of different objects. Some general rules - don’t use spaces, and try to keep the names simple but informative, and be careful about overwriting the same name)\nNow, parking_violations is an object in our environment. R gives us some helpful details about the object in the environment menu and the dropdown arrow on the object itself.\n\nR tells us how many observations (rows) and variables (columns) this object has - note how this is a “tidy” dataset. If you hover over the object itself, it will tell you the type of object and its size. In this case we have a dataframe, the tidy format for data in R, often abbreviated df. You can confirm this by running the function is.data.frame() which identifies if an object is of a certain type.\n\nis.data.frame(fhv)\n\n[1] TRUE"
  },
  {
    "objectID": "4.readingdata_datatypes.html#reading-different-types-of-data",
    "href": "4.readingdata_datatypes.html#reading-different-types-of-data",
    "title": "4. Reading Data and Data Types",
    "section": "Reading different types of data",
    "text": "Reading different types of data\nread_csv() is smart, but not perfect. You’ll notice that it has tried to identify the types of data in this dataframe. The Vehicle Year is read in as a num because it is made up of all digits. It correctly identified that Last Time Updated is a Date in the format hms (hours:minutes:seconds). And the DMV License Plate Number is a chr (character), because it is a categorical string variable.\nNumbers, characters, and dates, are three fundamental types of data that we will be using in R. We can use some of the other arguments of read_csv() to make sure that we get columns in the correct format. For example, it missed that Expiration Date should be a date.\n\nfhv <- read_csv(file = \"For_Hire_Vehicles__FHV__-_Active.csv\",\n                               col_types = cols(`Expiration Date` = col_datetime(format = '%m/%d/%Y'))\n                               )\n#check out the documentation of read_csv and col_datetime to get the right syntax for your column\n#note that when there are spaces in variable names in our data we need to refer to the name of the column in backticks `` we will fix this in a later lesson.\n\nBe careful with numeric data types that aren’t actually numbers that will drop leading zeroes (think of a zip code like “06810” which starts with a 0 would get read in as an integer 6,810). If you wanted to match to another dataset with a zipcode you wouldn’t be able to! Another helpful note: you can change the default col_type using col_type = cols(.default = col_character()). You can always change the types of columns back to numbers later."
  },
  {
    "objectID": "4.readingdata_datatypes.html#more-data-types",
    "href": "4.readingdata_datatypes.html#more-data-types",
    "title": "4. Reading Data and Data Types",
    "section": "More data types",
    "text": "More data types\nHere’s a brief look at some other object types you might find in R.\nA value is just one number, stored in an object.\n\nmy_value <- 42\nmy_value\n\n[1] 42\n\n\nA list is a group of values put together, separated by commas. In R the syntax to create a list starts with c(). They are also called vectors in R.\n\nmy_character_vector <- c(\"Patrick\", \"Lucy\", \"Henry\", \"Ceinna\")\nmy_numeric_vector <- c(1, 3, 5, 7, 9, 11, 13, 17)\n\nmy_character_vector\n\n[1] \"Patrick\" \"Lucy\"    \"Henry\"   \"Ceinna\" \n\nmy_numeric_vector\n\n[1]  1  3  5  7  9 11 13 17\n\n\nVectors can be named or unnamed. Named vectors are pairs of keys (names) and values separated by =.\n\nnamed_vector <- c(\"Patrick\" = 42, \"Lucy\" = 12, \"Ceinna\" = 56, \"Henry\" = 44)\n\nnamed_vector\n\nPatrick    Lucy  Ceinna   Henry \n     42      12      56      44 \n\n\nYou can get a vector of a particular variable in a dataframe by using $ with the dataframe name and the variable name.\n\nprintme <- head(fhv)\n\nprintme$`Base Name`\n\n[1] \"UBER USA, LLC\"               \"UBER USA, LLC\"              \n[3] \"UBER USA, LLC\"               \"BELL LX INC\"                \n[5] \"BAYRIDGE EXPRESS LUXYRY INC\" \"FIRST CLASS C/L SVC CORP\"   \n\n#head() only keeps the first few rows of a dataframe\n\nYou’ll also notice an important type of data - missing data - noted in R as NA. In this dataset the Wheelchair Accessible column is missing for the first few observations. This means that there is no value for that observation and variable. NA values in R are sticky, meaning that unless you tell R to ignore them, R will carry them through all your operations and maybe mess up some of your calculations. For example…\n\n1 + 2 + NA\n\n[1] NA\n\nsum(1,2,NA) #you should be able to figure this out based on what we've learned about functions so far!\n\n[1] NA\n\nsum(1,2,NA, na.rm = TRUE) #the na.rm = T argument removes NAs from a calculation.\n\n[1] 3"
  },
  {
    "objectID": "5.datacleaning_pipe.html#cleaning-data",
    "href": "5.datacleaning_pipe.html#cleaning-data",
    "title": "5. Data cleaning and the pipe",
    "section": "Cleaning Data",
    "text": "Cleaning Data\nLet’s read in data like we did last time. We’re going to “clean” it, which just means making it easier to use and getting it into tidy format.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.1.3\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nfhv <- read_csv(file = \"For_Hire_Vehicles__FHV__-_Active.csv\")\n\nRows: 98318 Columns: 23\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (20): Active, Vehicle License Number, Name, License Type, Expiration Da...\ndbl   (1): Vehicle Year\nlgl   (1): Order Date\ntime  (1): Last Time Updated\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWhen we read this in, we have some unfriendly names of variables with spaces in them. To access those variables we have to use `backticks` which are clunky. The janitor package has helpful data cleaning functions. Install it and take a look at the clean_names() function.\nFor many functions, the first argument is always the name of a dataframe. In this case we want to clean the names of our fhv dataframe.\n\nlibrary(janitor)\nfhv_clean <- clean_names(fhv)\n\nNow our names are clean - they are all lowercase, and have replaced all spaces with underscores. This will make it easier to refer to our column names as we transform data going forward.\nBut instead of assigning a new dataframe each time we want to apply a function, we should apply more than one function at once."
  },
  {
    "objectID": "5.datacleaning_pipe.html#the-pipe",
    "href": "5.datacleaning_pipe.html#the-pipe",
    "title": "5. Data cleaning and the pipe",
    "section": "The Pipe",
    "text": "The Pipe\nLet’s say we also wanted to change the name of a variable. Using the pipe %>% we can apply multiple functions to the same dataframe. Use the shortcut shift+command+m on mac or shift+ctrl+m on windows\nLet’s try rename() a function to change the names of columns. I don’t know what the “veh” column means so I’m going to look it up in the data dictionary on the open data page.\nIt’s an indicator for whether the vehicle is hybrid, so i’m going to rename it “hybrid”. Use the documentation for rename() to figure out the right syntax.\nTo use the pipe, start with the name of the data frame you want to edit, and then chain the pipes after each function using some indenting to organize your code.\n\nfhv_clean <- fhv %>% \n  clean_names() %>% \n  rename(hybrid = veh)\n\n#clean_names() is empty because the first argument is just the name of the dataframe, which has been piped in for us\n\nNow we have a dataset with clean names and a renamed column “hybrid”\nAs we learn more and more functions, we’ll have longer chains of pipes to clean and construct datasets.\n\nfhv_clean\n\n# A tibble: 98,318 x 23\n   active vehicle_license_number name               license_type expiration_date\n   <chr>  <chr>                  <chr>              <chr>        <chr>          \n 1 YES    5608977                AMERICAN,UNITED,T~ FOR HIRE VE~ 04/30/2025     \n 2 YES    5645622                RAMA,ILIR          FOR HIRE VE~ 09/11/2023     \n 3 YES    5192507                ORDONEZ,ELIAS      FOR HIRE VE~ 03/08/2025     \n 4 YES    5378856                RIVERA,ENMA        FOR HIRE VE~ 11/12/2024     \n 5 YES    5852121                A/VA,SERVICE,CORP  FOR HIRE VE~ 04/11/2024     \n 6 YES    5415237                REYES,JUAN,E       FOR HIRE VE~ 10/31/2023     \n 7 YES    5643301                BEGUM,TAZMINUR     FOR HIRE VE~ 09/30/2025     \n 8 YES    5701439                GONZALEZALVARADO,L FOR HIRE VE~ 06/13/2024     \n 9 YES    5790931                GOMEZ,JOSE,A       FOR HIRE VE~ 05/23/2025     \n10 YES    5743759                HOSSAIN,SM,KAMAL   FOR HIRE VE~ 12/08/2024     \n# i 98,308 more rows\n# i 18 more variables: permit_license_number <chr>,\n#   dmv_license_plate_number <chr>, vehicle_vin_number <chr>,\n#   wheelchair_accessible <chr>, certification_date <chr>, hack_up_date <chr>,\n#   vehicle_year <dbl>, base_number <chr>, base_name <chr>, base_type <chr>,\n#   hybrid <chr>, base_telephone_number <chr>, website <chr>,\n#   base_address <chr>, reason <chr>, order_date <lgl>, ..."
  },
  {
    "objectID": "6.select_filter.html#select",
    "href": "6.select_filter.html#select",
    "title": "6. Select, Filter, and Mutate",
    "section": "Select",
    "text": "Select\nLet’s read in our data and do some cleaning up of the names with the pipe\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.1.3\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nfhv_clean <- read_csv(file = \"For_Hire_Vehicles__FHV__-_Active.csv\") %>% \n  clean_names() %>% \n  rename(hybrid = veh)\n\nRows: 98318 Columns: 23\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (20): Active, Vehicle License Number, Name, License Type, Expiration Da...\ndbl   (1): Vehicle Year\nlgl   (1): Order Date\ntime  (1): Last Time Updated\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe have a lot of information in this data frame. What if we want to look at just a few rows and columns. Two core dplyr functions, select and filter, help us do so. dplyr is a core part of the tidyverse, and it has functions that modify dataframes (think of the pipe!)\n\n?select()\n\nstarting httpd help server ... done\n\n?filter()\n\nLet’s try just keeping active, vehicle_lisence_number, name, license_type, vehicle_year, base_name, and base_type. Select’s first argument is the dataframe, and the following arguments are all the names of columns. In R documentation, an ellipses argument ... means that the function takes a list of arguments. In this case, a list of variables to select\n\nfhv_clean %>% \n  select(active, vehicle_license_number, name, license_type, vehicle_year, base_name, base_type)\n\n# A tibble: 98,318 x 7\n   active vehicle_license_number name        license_type vehicle_year base_name\n   <chr>  <chr>                  <chr>       <chr>               <dbl> <chr>    \n 1 YES    5608977                AMERICAN,U~ FOR HIRE VE~         2015 UBER USA~\n 2 YES    5645622                RAMA,ILIR   FOR HIRE VE~         2022 UBER USA~\n 3 YES    5192507                ORDONEZ,EL~ FOR HIRE VE~         2016 UBER USA~\n 4 YES    5378856                RIVERA,ENMA FOR HIRE VE~         2018 BELL LX ~\n 5 YES    5852121                A/VA,SERVI~ FOR HIRE VE~         2019 BAYRIDGE~\n 6 YES    5415237                REYES,JUAN~ FOR HIRE VE~         2012 FIRST CL~\n 7 YES    5643301                BEGUM,TAZM~ FOR HIRE VE~         2015 UBER USA~\n 8 YES    5701439                GONZALEZAL~ FOR HIRE VE~         2016 UBER USA~\n 9 YES    5790931                GOMEZ,JOSE~ FOR HIRE VE~         2017 UBER USA~\n10 YES    5743759                HOSSAIN,SM~ FOR HIRE VE~         2021 TRI-CITY~\n# i 98,308 more rows\n# i 1 more variable: base_type <chr>\n\n#this dataframe has all our observations, but only 6 variables (columns)\n\nFor more advanced selection, check out the logical operations using the tidy-select expressions. Check what - does, for instance.\n\nfhv_clean %>% \n  select(-active)\n\n# A tibble: 98,318 x 22\n   vehicle_license_number name                      license_type expiration_date\n   <chr>                  <chr>                     <chr>        <chr>          \n 1 5608977                AMERICAN,UNITED,TRANSPOR~ FOR HIRE VE~ 04/30/2025     \n 2 5645622                RAMA,ILIR                 FOR HIRE VE~ 09/11/2023     \n 3 5192507                ORDONEZ,ELIAS             FOR HIRE VE~ 03/08/2025     \n 4 5378856                RIVERA,ENMA               FOR HIRE VE~ 11/12/2024     \n 5 5852121                A/VA,SERVICE,CORP         FOR HIRE VE~ 04/11/2024     \n 6 5415237                REYES,JUAN,E              FOR HIRE VE~ 10/31/2023     \n 7 5643301                BEGUM,TAZMINUR            FOR HIRE VE~ 09/30/2025     \n 8 5701439                GONZALEZALVARADO,L        FOR HIRE VE~ 06/13/2024     \n 9 5790931                GOMEZ,JOSE,A              FOR HIRE VE~ 05/23/2025     \n10 5743759                HOSSAIN,SM,KAMAL          FOR HIRE VE~ 12/08/2024     \n# i 98,308 more rows\n# i 18 more variables: permit_license_number <chr>,\n#   dmv_license_plate_number <chr>, vehicle_vin_number <chr>,\n#   wheelchair_accessible <chr>, certification_date <chr>, hack_up_date <chr>,\n#   vehicle_year <dbl>, base_number <chr>, base_name <chr>, base_type <chr>,\n#   hybrid <chr>, base_telephone_number <chr>, website <chr>,\n#   base_address <chr>, reason <chr>, order_date <lgl>, ..."
  },
  {
    "objectID": "6.select_filter.html#filter",
    "href": "6.select_filter.html#filter",
    "title": "6. Select, Filter, and Mutate",
    "section": "Filter",
    "text": "Filter\nFilter does the same thing as select, but for rows that meet certain logical conditions. Let’s get all the uber vehicles. The first argument of filter is the dataframe. The second is a logical expression.\n\nfhv_clean %>% \n  filter(base_name == \"UBER USA, LLC\")\n\n# A tibble: 76,710 x 23\n   active vehicle_license_number name               license_type expiration_date\n   <chr>  <chr>                  <chr>              <chr>        <chr>          \n 1 YES    5608977                AMERICAN,UNITED,T~ FOR HIRE VE~ 04/30/2025     \n 2 YES    5645622                RAMA,ILIR          FOR HIRE VE~ 09/11/2023     \n 3 YES    5192507                ORDONEZ,ELIAS      FOR HIRE VE~ 03/08/2025     \n 4 YES    5643301                BEGUM,TAZMINUR     FOR HIRE VE~ 09/30/2025     \n 5 YES    5701439                GONZALEZALVARADO,L FOR HIRE VE~ 06/13/2024     \n 6 YES    5790931                GOMEZ,JOSE,A       FOR HIRE VE~ 05/23/2025     \n 7 YES    5867611                HUSSAIN, TARIQ     FOR HIRE VE~ 05/08/2024     \n 8 YES    5869802                LU,GUI,ZHAO        FOR HIRE VE~ 05/12/2024     \n 9 YES    5715034                LI,PEI             FOR HIRE VE~ 08/15/2024     \n10 YES    5725892                HAILE,TEMESGEN,K   FOR HIRE VE~ 09/23/2024     \n# i 76,700 more rows\n# i 18 more variables: permit_license_number <chr>,\n#   dmv_license_plate_number <chr>, vehicle_vin_number <chr>,\n#   wheelchair_accessible <chr>, certification_date <chr>, hack_up_date <chr>,\n#   vehicle_year <dbl>, base_number <chr>, base_name <chr>, base_type <chr>,\n#   hybrid <chr>, base_telephone_number <chr>, website <chr>,\n#   base_address <chr>, reason <chr>, order_date <lgl>, ...\n\n#this dataframe has fewer rows because we have only kept the registered Ubers.\n\nYou use R’s logical operators to return the rows that you care about. Here I’ve returned all the rows where the base_name column exactly matches the string “UBER USA, LLC.” Always use == for logical expressions. The single equals sign = is just for defining the names of arguments and other list items, and will confuse R.\nHere’s some other helpful logical operators you may find yourself using, to return certain strings, numbers, or lists.\n\nfhv_clean %>% \n  filter(base_name %in% c(\"UBER USA, LLC\", \"Take Me 2 Inc\"), #name is in the list\n         vehicle_year >= 2000, #year is greater than or equal to\n         hybrid != \"HYB\" #no hybrids\n         )\n\n# A tibble: 6,433 x 23\n   active vehicle_license_number name               license_type expiration_date\n   <chr>  <chr>                  <chr>              <chr>        <chr>          \n 1 YES    6025256                ALSAHYBI, SUHAIB   FOR HIRE VE~ 04/17/2025     \n 2 YES    5707125                CITY,QUEENS,INC    FOR HIRE VE~ 07/12/2024     \n 3 YES    5278357                LI,LIN             FOR HIRE VE~ 11/01/2023     \n 4 YES    6015005                GULATI,SONU        FOR HIRE VE~ 01/23/2025     \n 5 YES    5839092                WILSON',SONS,INC   FOR HIRE VE~ 12/28/2023     \n 6 YES    5837702                AMERICAN,UNITED,T~ FOR HIRE VE~ 12/18/2023     \n 7 YES    6036945                CCM NY LLC         FOR HIRE VE~ 08/02/2025     \n 8 YES    6002683                WU, JINXIANG       FOR HIRE VE~ 08/23/2024     \n 9 YES    5999878                ALL GREEN HAMSAF ~ FOR HIRE VE~ 08/08/2024     \n10 YES    5661911                SINGH,SANDEEP      FOR HIRE VE~ 12/16/2023     \n# i 6,423 more rows\n# i 18 more variables: permit_license_number <chr>,\n#   dmv_license_plate_number <chr>, vehicle_vin_number <chr>,\n#   wheelchair_accessible <chr>, certification_date <chr>, hack_up_date <chr>,\n#   vehicle_year <dbl>, base_number <chr>, base_name <chr>, base_type <chr>,\n#   hybrid <chr>, base_telephone_number <chr>, website <chr>,\n#   base_address <chr>, reason <chr>, order_date <lgl>, ...\n\n\nLet’s combine it to get a subsample of columns and rows based on the criteria specified and assign it for further analysis\n\nubers_thiscentury <- fhv_clean %>% \n  select(active, vehicle_license_number, name, license_type, vehicle_year, base_name, base_type) %>% \n  filter(base_name == \"UBER USA, LLC\",\n         vehicle_year >= 2000, #year is greater than or equal to\n         )"
  },
  {
    "objectID": "7.mutate.html#mutate",
    "href": "7.mutate.html#mutate",
    "title": "7. Mutate",
    "section": "Mutate",
    "text": "Mutate\nMutate is an incredibly powerful tool to create new columns and new variables.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.1.3\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n?mutate()\n\nstarting httpd help server ... done\n\n\nLet’s grab our code to read in the clean dataframe\n\nfhv_clean <- read_csv(file = \"For_Hire_Vehicles__FHV__-_Active.csv\") %>% \n  clean_names() %>% \n  rename(hybrid = veh)\n\nRows: 98318 Columns: 23\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (20): Active, Vehicle License Number, Name, License Type, Expiration Da...\ndbl   (1): Vehicle Year\nlgl   (1): Order Date\ntime  (1): Last Time Updated\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe create a new column with mutate by setting the name of our new column and a new value\n\nfhv_clean %>% \n  mutate(city = \"New York City\")\n\n# A tibble: 98,318 x 24\n   active vehicle_license_number name               license_type expiration_date\n   <chr>  <chr>                  <chr>              <chr>        <chr>          \n 1 YES    5608977                AMERICAN,UNITED,T~ FOR HIRE VE~ 04/30/2025     \n 2 YES    5645622                RAMA,ILIR          FOR HIRE VE~ 09/11/2023     \n 3 YES    5192507                ORDONEZ,ELIAS      FOR HIRE VE~ 03/08/2025     \n 4 YES    5378856                RIVERA,ENMA        FOR HIRE VE~ 11/12/2024     \n 5 YES    5852121                A/VA,SERVICE,CORP  FOR HIRE VE~ 04/11/2024     \n 6 YES    5415237                REYES,JUAN,E       FOR HIRE VE~ 10/31/2023     \n 7 YES    5643301                BEGUM,TAZMINUR     FOR HIRE VE~ 09/30/2025     \n 8 YES    5701439                GONZALEZALVARADO,L FOR HIRE VE~ 06/13/2024     \n 9 YES    5790931                GOMEZ,JOSE,A       FOR HIRE VE~ 05/23/2025     \n10 YES    5743759                HOSSAIN,SM,KAMAL   FOR HIRE VE~ 12/08/2024     \n# i 98,308 more rows\n# i 19 more variables: permit_license_number <chr>,\n#   dmv_license_plate_number <chr>, vehicle_vin_number <chr>,\n#   wheelchair_accessible <chr>, certification_date <chr>, hack_up_date <chr>,\n#   vehicle_year <dbl>, base_number <chr>, base_name <chr>, base_type <chr>,\n#   hybrid <chr>, base_telephone_number <chr>, website <chr>,\n#   base_address <chr>, reason <chr>, order_date <lgl>, ...\n\n\nYou can create multiple new columns (...) at once\n\nfhv_clean %>% \n  mutate(city = \"New York City\",\n         active = TRUE) #I can overwrite column names too. I've made this active column boolean (true or false)\n\n# A tibble: 98,318 x 24\n   active vehicle_license_number name               license_type expiration_date\n   <lgl>  <chr>                  <chr>              <chr>        <chr>          \n 1 TRUE   5608977                AMERICAN,UNITED,T~ FOR HIRE VE~ 04/30/2025     \n 2 TRUE   5645622                RAMA,ILIR          FOR HIRE VE~ 09/11/2023     \n 3 TRUE   5192507                ORDONEZ,ELIAS      FOR HIRE VE~ 03/08/2025     \n 4 TRUE   5378856                RIVERA,ENMA        FOR HIRE VE~ 11/12/2024     \n 5 TRUE   5852121                A/VA,SERVICE,CORP  FOR HIRE VE~ 04/11/2024     \n 6 TRUE   5415237                REYES,JUAN,E       FOR HIRE VE~ 10/31/2023     \n 7 TRUE   5643301                BEGUM,TAZMINUR     FOR HIRE VE~ 09/30/2025     \n 8 TRUE   5701439                GONZALEZALVARADO,L FOR HIRE VE~ 06/13/2024     \n 9 TRUE   5790931                GOMEZ,JOSE,A       FOR HIRE VE~ 05/23/2025     \n10 TRUE   5743759                HOSSAIN,SM,KAMAL   FOR HIRE VE~ 12/08/2024     \n# i 98,308 more rows\n# i 19 more variables: permit_license_number <chr>,\n#   dmv_license_plate_number <chr>, vehicle_vin_number <chr>,\n#   wheelchair_accessible <chr>, certification_date <chr>, hack_up_date <chr>,\n#   vehicle_year <dbl>, base_number <chr>, base_name <chr>, base_type <chr>,\n#   hybrid <chr>, base_telephone_number <chr>, website <chr>,\n#   base_address <chr>, reason <chr>, order_date <lgl>, ..."
  },
  {
    "objectID": "7.mutate.html#mutate-with-logical-expressions",
    "href": "7.mutate.html#mutate-with-logical-expressions",
    "title": "7. Mutate",
    "section": "Mutate with logical expressions",
    "text": "Mutate with logical expressions\nWhere mutate gets powerful is when you use it with logical expressions. Here we use if_else()\n\nfhv_rideshare <- fhv_clean %>% \n  mutate(rideshare = if_else(\n    condition = base_name == \"UBER USA, LLC\",\n    true = \"rideshare\",\n    false = \"limo\"\n  )) #if it's an uber call it rideshare, if its a limo call it something else\n#notice I named the arguments here! A good practice when the argument is not ...\n\nTabulate the variable we made with the count() funtion\n\nfhv_rideshare %>% \n  count(rideshare)\n\n# A tibble: 2 x 2\n  rideshare     n\n  <chr>     <int>\n1 limo      21608\n2 rideshare 76710\n\n\nWhat if we have more than one logical expression we care about? Check out case_when.\n\nfhv_blackcar <- fhv_clean %>% \n  mutate(\n    ride_type = case_when(\n      base_name == \"UBER USA, LLC\" & base_type == \"BLACK-CAR\" ~ \"BLACK CAR RIDESHARE\",\n      base_name != \"UBER USA, LLC\" & base_type == \"BLACK-CAR\" ~ \"BLACK CAR NON-RIDESHARE\",\n      TRUE ~ base_type #if it doesn't meet either condition, return the base_type\n    ))\n\nUse & and | for and and or logical expressions with multiple conditions\n\nfhv_blackcar %>% \n  count(ride_type)\n\n# A tibble: 4 x 2\n  ride_type                   n\n  <chr>                   <int>\n1 BLACK CAR NON-RIDESHARE 16225\n2 BLACK CAR RIDESHARE     76710\n3 LIVERY                   3652\n4 LUXURY                   1731\n\n#now we have four categories!"
  },
  {
    "objectID": "7.mutate.html#normalizing-with-mutate",
    "href": "7.mutate.html#normalizing-with-mutate",
    "title": "7. Mutate",
    "section": "Normalizing with Mutate",
    "text": "Normalizing with Mutate\nYou can use statistical functions like mean to normalize data with mutate. mean will return the average of all the vehicle years. You can use mutate to generate a new variable that takes the distance from each observation to the mean.\n\nfhv_clean %>% \n  mutate(year_norm = vehicle_year/mean(vehicle_year, na.rm = T),\n         year_pct = percent_rank(vehicle_year)) %>% \n  select(vehicle_license_number, vehicle_year, year_norm, year_pct)\n\n# A tibble: 98,318 x 4\n   vehicle_license_number vehicle_year year_norm year_pct\n   <chr>                         <dbl>     <dbl>    <dbl>\n 1 5608977                        2015     0.998   0.120 \n 2 5645622                        2022     1.00    0.797 \n 3 5192507                        2016     0.999   0.212 \n 4 5378856                        2018     1.00    0.440 \n 5 5852121                        2019     1.00    0.552 \n 6 5415237                        2012     0.997   0.0225\n 7 5643301                        2015     0.998   0.120 \n 8 5701439                        2016     0.999   0.212 \n 9 5790931                        2017     0.999   0.313 \n10 5743759                        2021     1.00    0.714 \n# i 98,308 more rows"
  },
  {
    "objectID": "8.groupby_summarize.html#why-summarize-data",
    "href": "8.groupby_summarize.html#why-summarize-data",
    "title": "8. Group By and Summarize",
    "section": "Why summarize data?",
    "text": "Why summarize data?\nHaving clean data is great, but when working with large datasets we are often looking for summary statistics to let us compare different groups. group_by and summarize, often used together in a pipe, are a powerful combo for generating statistics at the group level.\nSummarizing allows us to compare means, medians, or top values based on different categories. It can also be a helpful data cleaning tool, depending on the level of observations in the data."
  },
  {
    "objectID": "8.groupby_summarize.html#summarize",
    "href": "8.groupby_summarize.html#summarize",
    "title": "8. Group By and Summarize",
    "section": "Summarize",
    "text": "Summarize\nSummarize takes a data frame and a ... list of new variables to generate.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.1.3\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n?summarize()\n\nstarting httpd help server ... done\n\n\nLet’s grab our code to read in the clean dataframe again.\n\nfhv_clean <- read_csv(file = \"For_Hire_Vehicles__FHV__-_Active.csv\") %>% \n  clean_names() %>% \n  rename(hybrid = veh)\n\nRows: 98318 Columns: 23\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (20): Active, Vehicle License Number, Name, License Type, Expiration Da...\ndbl   (1): Vehicle Year\nlgl   (1): Order Date\ntime  (1): Last Time Updated\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNote - summarize is different than summary a helpful function that provides the basic stats of all variables - a good first step when looking at a new data set\n\nsummary(fhv_clean)\n\n    active          vehicle_license_number     name          \n Length:98318       Length:98318           Length:98318      \n Class :character   Class :character       Class :character  \n Mode  :character   Mode  :character       Mode  :character  \n                                                             \n                                                             \n                                                             \n license_type       expiration_date    permit_license_number\n Length:98318       Length:98318       Length:98318         \n Class :character   Class :character   Class :character     \n Mode  :character   Mode  :character   Mode  :character     \n                                                            \n                                                            \n                                                            \n dmv_license_plate_number vehicle_vin_number wheelchair_accessible\n Length:98318             Length:98318       Length:98318         \n Class :character         Class :character   Class :character     \n Mode  :character         Mode  :character   Mode  :character     \n                                                                  \n                                                                  \n                                                                  \n certification_date hack_up_date        vehicle_year  base_number       \n Length:98318       Length:98318       Min.   :1949   Length:98318      \n Class :character   Class :character   1st Qu.:2016   Class :character  \n Mode  :character   Mode  :character   Median :2018   Mode  :character  \n                                       Mean   :2018                     \n                                       3rd Qu.:2021                     \n                                       Max.   :5015                     \n  base_name          base_type            hybrid          base_telephone_number\n Length:98318       Length:98318       Length:98318       Length:98318         \n Class :character   Class :character   Class :character   Class :character     \n Mode  :character   Mode  :character   Mode  :character   Mode  :character     \n                                                                               \n                                                                               \n                                                                               \n   website          base_address          reason          order_date    \n Length:98318       Length:98318       Length:98318       Mode:logical  \n Class :character   Class :character   Class :character   NA's:98318    \n Mode  :character   Mode  :character   Mode  :character                 \n                                                                        \n                                                                        \n                                                                        \n last_date_updated  last_time_updated\n Length:98318       Length:98318     \n Class :character   Class1:hms       \n Mode  :character   Class2:difftime  \n                    Mode  :numeric   \n                                     \n                                     \n\n\nWith a basic application of summarize, we take all the rows of the dataframe and turn them into one row of data. Here we use mean() to get the average\n\nfhv_clean %>% \n  summarize(average_year = mean(vehicle_year))\n\n# A tibble: 1 x 1\n  average_year\n         <dbl>\n1        2018.\n\n#careful - NAs are sticky so mean() will return NA if there are any missing values. Use na.rm = T to exclude missing in calculating the average\n\nfhv_clean %>% \n  summarize(average_year = mean(vehicle_year, na.rm = TRUE))\n\n# A tibble: 1 x 1\n  average_year\n         <dbl>\n1        2018.\n\n\nYou can summarize multiple variables (...) at once. Look at summarize documentation for the full list of operations you can summarize with.\n\nfhv_clean %>% \n  summarize(total_cars = n(), #n() just counts the number of rows in the group\n            average_year = mean(vehicle_year, na.rm = TRUE),\n            median_year = median(vehicle_year, na.rm = T))\n\n# A tibble: 1 x 3\n  total_cars average_year median_year\n       <int>        <dbl>       <dbl>\n1      98318        2018.        2018\n\n\nWhen using summarize it defaults to one big group - all the data is summarized. To summarize by group we can add group_by()"
  },
  {
    "objectID": "8.groupby_summarize.html#group_by",
    "href": "8.groupby_summarize.html#group_by",
    "title": "8. Group By and Summarize",
    "section": "Group_by",
    "text": "Group_by\nWhere summarize becomes really powerful is pairing it with group_by\n\nfhv_clean %>% \n  group_by(hybrid) %>% \n  summarize(number_cars = n(),\n            mean_year = mean(vehicle_year, na.rm = T))\n\n# A tibble: 9 x 3\n  hybrid number_cars mean_year\n  <chr>        <int>     <dbl>\n1 BEV           2267     2022.\n2 CNG              1     2020 \n3 DSE              1     2019 \n4 HYB           3267     2019.\n5 N                1     2016 \n6 NON              1     2012 \n7 STR             33     2017.\n8 WAV           6016     2019.\n9 <NA>         86731     2018.\n\n\nOften we are grouping on variables of interest and summarizing across that variable. Take the variable we made last time, for example\n\nfhv_type_summary <- fhv_clean %>% \n  mutate(\n    ride_type = case_when(\n      base_name == \"UBER USA, LLC\" & base_type == \"BLACK-CAR\" ~ \"BLACK CAR RIDESHARE\",\n      base_name != \"UBER USA, LLC\" & base_type == \"BLACK-CAR\" ~ \"BLACK CAR NON-RIDESHARE\",\n      TRUE ~ base_type #if it doesn't meet either condition, return the base_type\n    )) %>% \n  group_by(ride_type) %>% #group by the variable we just created!\n  summarize(no_cars = n(),\n            average_year = mean(vehicle_year, na.rm = T))\n\nfhv_type_summary\n\n# A tibble: 4 x 3\n  ride_type               no_cars average_year\n  <chr>                     <int>        <dbl>\n1 BLACK CAR NON-RIDESHARE   16225        2018.\n2 BLACK CAR RIDESHARE       76710        2018.\n3 LIVERY                     3652        2015.\n4 LUXURY                     1731        2020.\n\n\nHere we can see some interesting trends start to emerge, like how the livery cars tend to be the oldest and the luxury cars tend to be newer.\nWe can also group_by multiple variables, or group by logical expressions.\n\nfhv_clean %>% \n  group_by(hybrid, base_type) %>% \n  summarize(total_cars = n())\n\n`summarise()` has grouped output by 'hybrid'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 18 x 3\n# Groups:   hybrid [9]\n   hybrid base_type total_cars\n   <chr>  <chr>          <int>\n 1 BEV    BLACK-CAR       2232\n 2 BEV    LIVERY            17\n 3 BEV    LUXURY            18\n 4 CNG    BLACK-CAR          1\n 5 DSE    BLACK-CAR          1\n 6 HYB    BLACK-CAR       3009\n 7 HYB    LIVERY           174\n 8 HYB    LUXURY            84\n 9 N      BLACK-CAR          1\n10 NON    BLACK-CAR          1\n11 STR    BLACK-CAR         18\n12 STR    LUXURY            15\n13 WAV    BLACK-CAR       5904\n14 WAV    LIVERY            96\n15 WAV    LUXURY            16\n16 <NA>   BLACK-CAR      81768\n17 <NA>   LIVERY          3365\n18 <NA>   LUXURY          1598\n\nfhv_clean %>% \n  group_by(base_type, vehicle_year >= 2000) %>% \n  summarize(total_cars = n())\n\n`summarise()` has grouped output by 'base_type'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 x 3\n# Groups:   base_type [3]\n  base_type `vehicle_year >= 2000` total_cars\n  <chr>     <lgl>                       <int>\n1 BLACK-CAR TRUE                        92935\n2 LIVERY    TRUE                         3652\n3 LUXURY    FALSE                           5\n4 LUXURY    TRUE                         1726"
  },
  {
    "objectID": "8.groupby_summarize.html#group_by-with-mutate",
    "href": "8.groupby_summarize.html#group_by-with-mutate",
    "title": "8. Group By and Summarize",
    "section": "Group_by with mutate",
    "text": "Group_by with mutate\nPair group_by with mutate to create helpful summary level variables without reducing the number of rows in the dataset.\n\nfhv_clean %>% \n  group_by(base_name) %>% \n  mutate(total_by_name = n()) #variable with the total # of cars for each company name\n\n# A tibble: 98,318 x 24\n# Groups:   base_name [771]\n   active vehicle_license_number name               license_type expiration_date\n   <chr>  <chr>                  <chr>              <chr>        <chr>          \n 1 YES    5608977                AMERICAN,UNITED,T~ FOR HIRE VE~ 04/30/2025     \n 2 YES    5645622                RAMA,ILIR          FOR HIRE VE~ 09/11/2023     \n 3 YES    5192507                ORDONEZ,ELIAS      FOR HIRE VE~ 03/08/2025     \n 4 YES    5378856                RIVERA,ENMA        FOR HIRE VE~ 11/12/2024     \n 5 YES    5852121                A/VA,SERVICE,CORP  FOR HIRE VE~ 04/11/2024     \n 6 YES    5415237                REYES,JUAN,E       FOR HIRE VE~ 10/31/2023     \n 7 YES    5643301                BEGUM,TAZMINUR     FOR HIRE VE~ 09/30/2025     \n 8 YES    5701439                GONZALEZALVARADO,L FOR HIRE VE~ 06/13/2024     \n 9 YES    5790931                GOMEZ,JOSE,A       FOR HIRE VE~ 05/23/2025     \n10 YES    5743759                HOSSAIN,SM,KAMAL   FOR HIRE VE~ 12/08/2024     \n# i 98,308 more rows\n# i 19 more variables: permit_license_number <chr>,\n#   dmv_license_plate_number <chr>, vehicle_vin_number <chr>,\n#   wheelchair_accessible <chr>, certification_date <chr>, hack_up_date <chr>,\n#   vehicle_year <dbl>, base_number <chr>, base_name <chr>, base_type <chr>,\n#   hybrid <chr>, base_telephone_number <chr>, website <chr>,\n#   base_address <chr>, reason <chr>, order_date <lgl>, ...\n\n\nUse ungroup() to return to normal mutation operations\n\nfhv_clean %>% \n  group_by(base_type) %>% \n  mutate(mean_by_type = mean(vehicle_year, na.rm =T)) %>% \n  ungroup() %>% \n  mutate(above_below_mean = if_else(\n    condition = vehicle_year > mean_by_type,\n    true = \"above mean\",\n    false = \"below mean\"\n  ))\n\n# A tibble: 98,318 x 25\n   active vehicle_license_number name               license_type expiration_date\n   <chr>  <chr>                  <chr>              <chr>        <chr>          \n 1 YES    5608977                AMERICAN,UNITED,T~ FOR HIRE VE~ 04/30/2025     \n 2 YES    5645622                RAMA,ILIR          FOR HIRE VE~ 09/11/2023     \n 3 YES    5192507                ORDONEZ,ELIAS      FOR HIRE VE~ 03/08/2025     \n 4 YES    5378856                RIVERA,ENMA        FOR HIRE VE~ 11/12/2024     \n 5 YES    5852121                A/VA,SERVICE,CORP  FOR HIRE VE~ 04/11/2024     \n 6 YES    5415237                REYES,JUAN,E       FOR HIRE VE~ 10/31/2023     \n 7 YES    5643301                BEGUM,TAZMINUR     FOR HIRE VE~ 09/30/2025     \n 8 YES    5701439                GONZALEZALVARADO,L FOR HIRE VE~ 06/13/2024     \n 9 YES    5790931                GOMEZ,JOSE,A       FOR HIRE VE~ 05/23/2025     \n10 YES    5743759                HOSSAIN,SM,KAMAL   FOR HIRE VE~ 12/08/2024     \n# i 98,308 more rows\n# i 20 more variables: permit_license_number <chr>,\n#   dmv_license_plate_number <chr>, vehicle_vin_number <chr>,\n#   wheelchair_accessible <chr>, certification_date <chr>, hack_up_date <chr>,\n#   vehicle_year <dbl>, base_number <chr>, base_name <chr>, base_type <chr>,\n#   hybrid <chr>, base_telephone_number <chr>, website <chr>,\n#   base_address <chr>, reason <chr>, order_date <lgl>, ...\n\n#this creates a variable to show if this car is above or below the average year for the group"
  },
  {
    "objectID": "9.arrange_writecsv.html#how-do-we-get-data-out-of-r",
    "href": "9.arrange_writecsv.html#how-do-we-get-data-out-of-r",
    "title": "9. Arrange and Write Data",
    "section": "How do we get data out of R?",
    "text": "How do we get data out of R?\nOften, we will want to take data that we clean, mutate, summarize, filter, or select with, and output it for use in another software. Think about how you might want to process a million-row data set to get some summary statistics, then create a nice table in excel. Or take some data that you need to make a chart or graphic, and export it so that you can read it into DataWrapper or some other visualization tool. Maybe you need to send your boss a list of items that are buried in a big R dataset.\nWriting data will let you take data out of R and use it other places. But first we might want to use some other functions to get it looking nice and orderly."
  },
  {
    "objectID": "9.arrange_writecsv.html#arrange",
    "href": "9.arrange_writecsv.html#arrange",
    "title": "9. Arrange and Write Data",
    "section": "Arrange",
    "text": "Arrange\narrange() takes data and sorts it based on certain criteria. Like many of our basic functions, it takes a list ... of inputs to sort on. Let’s take a look at an example of something we summarized.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'ggplot2' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'stringr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.1.3\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n?arrange()\n\nstarting httpd help server ... done\n\n\nLet’s grab our code to read in the clean dataframe again. This time I’m just going to use a big pipe to go right to the summary.\n\nlibrary(tidyverse)\nlibrary(janitor)\n\nfhv_summary <- read_csv(file = \"For_Hire_Vehicles__FHV__-_Active.csv\") %>% \n  clean_names() %>% \n  rename(hybrid = veh) %>% \n  mutate(\n    ride_type = case_when(\n      base_name == \"UBER USA, LLC\" & base_type == \"BLACK-CAR\" ~ \"BLACK CAR RIDESHARE\",\n      base_name != \"UBER USA, LLC\" & base_type == \"BLACK-CAR\" ~ \"BLACK CAR NON-RIDESHARE\",\n      TRUE ~ base_type #if it doesn't meet either condition, return the base_type\n    )) %>% \n  group_by(ride_type) %>% #group by the variable we just created!\n  summarize(no_cars = n(),\n            average_year = mean(vehicle_year, na.rm = T))\n\nRows: 98318 Columns: 23\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (20): Active, Vehicle License Number, Name, License Type, Expiration Da...\ndbl   (1): Vehicle Year\nlgl   (1): Order Date\ntime  (1): Last Time Updated\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfhv_summary\n\n# A tibble: 4 x 3\n  ride_type               no_cars average_year\n  <chr>                     <int>        <dbl>\n1 BLACK CAR NON-RIDESHARE   16225        2018.\n2 BLACK CAR RIDESHARE       76710        2018.\n3 LIVERY                     3652        2015.\n4 LUXURY                     1731        2020.\n\n\nNow Let’s say we wanted to sort this list by average oldest car to newest car.\n\nfhv_summary %>% \n  arrange(average_year)\n\n# A tibble: 4 x 3\n  ride_type               no_cars average_year\n  <chr>                     <int>        <dbl>\n1 LIVERY                     3652        2015.\n2 BLACK CAR NON-RIDESHARE   16225        2018.\n3 BLACK CAR RIDESHARE       76710        2018.\n4 LUXURY                     1731        2020.\n\n\nThat puts all the oldest car on top and the newest car on bottom\ndesc is a function that transforms a vector to descending order, and is helpful to use nested inside arrange.\n\nfhv_arranged <- fhv_summary %>% \n  arrange(desc(average_year))\n\nArrange also works with multiple variables - the variable listed second breaks ties - and within groups with group_by."
  },
  {
    "objectID": "9.arrange_writecsv.html#write-out-data",
    "href": "9.arrange_writecsv.html#write-out-data",
    "title": "9. Arrange and Write Data",
    "section": "Write out data",
    "text": "Write out data\nNow that we have a nice table arranged the way we want, we can output it for use in another software.\nwrite_csv() is a twin function to read_csv(). It takes the name of an object and then a filepath to write to.\n\nfhv_arranged %>% \n  write_csv(file = \"ride_type_by_average_year.csv\")\n\nSince we used the local path this shows up right in our project directory. We will be writing out to .csvs mostly, but there are companion functions to write out other types of data, like excel spreadsheets."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learning R",
    "section": "",
    "text": "In this directory, we’re going to learn the basics of R and how to use it to read in, analyze, and visualize data so you can use it in data stories."
  },
  {
    "objectID": "index.html#urpl-1620",
    "href": "index.html#urpl-1620",
    "title": "Learning R",
    "section": "URPL-1620",
    "text": "URPL-1620\nThis page was created as a guide to help students at NYU Wagner’s Data Analysis, Mapping, and Storytelling course.\nHere are links to the Brightspace, Slack, and Google Drive"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Learning R",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThese tutorials are adapted from previous course materials assembled and edited by Sam Rabiyah, Maxwell Austensen, and Lucy Block."
  }
]